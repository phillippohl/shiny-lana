/**
 * 
 */
package com.shinylana.ui.composites;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;

/**
 * @author phillippohl
 * @version 0.1
 */
public class BalanceComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Table table_1;
	@AutoGenerated
	private Table table_2;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public BalanceComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		setupBalanceTable();
	}
	
	private void setupBalanceTable() {
		table_1.addContainerProperty("Assets", String.class, "");
		table_1.addContainerProperty("", Double.class, 0);
		table_2.addContainerProperty("Equity & Liabilities",  String.class, "");
		table_2.addContainerProperty("", Double.class, 0);
	}

	public Table getTable() {
		return table_1;
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table_1
		table_1 = new Table();
		table_1.setImmediate(false);
		table_1.setWidth("100.0%");
		table_1.setHeight("100.0%");
		mainLayout.addComponent(table_1);
		mainLayout.setExpandRatio(table_1, 1.0f);
		
		// table_2
		table_2 = new Table();
		table_2.setImmediate(false);
		table_2.setWidth("100.0%");
		table_2.setHeight("100.0%");
		mainLayout.addComponent(table_2);
		mainLayout.setExpandRatio(table_2, 1.0f);
		
		return mainLayout;
	}
	
	public void addAssetRow(List newRecord) {
		/*
		 * ASSETS
		 * #Current Assets
		 * Cash and Cash Equivalents
		 * Accounts Receivable (Debtors)
		 * Inventories
		 * Prepaid Expenses
		 * Investment Securities (Held for trading)
		 * Other Current Assets
		 * #Non-Current Assets (Fixed Assets)
		 * Property, Plant and Equipment (PPE)
		 * Investment Securities (Available for sale/Held-to-maturity)
		 * Investments in Associates
		 * Intangible Assets (Patent, Copyright, Trademark, etc.)
		 * Goodwill
		 * Other Non-Current Assets, e.g. Deferred Tax Assets, Lease Receivable
		 */
		table_1.addItem(new Object[] {"Cash and Cash Equivalents", new Double(10000)}, new Integer(1));
		/*
		table_1.addItem(new Object[] {"Accounts Receivable", newRecord.get(3)}, new Integer(2));
		table_1.addItem(new Object[] {"Inventories", null}, new Integer(3));
		table_1.addItem(new Object[] {"Prepaid Expenses", null}, new Integer(4));
		table_1.addItem(new Object[] {"Investment Securities", null}, new Integer(5));
		table_1.addItem(new Object[] {"Other Current Assets", null}, new Integer(6));
		table_1.addItem(new Object[] {"Property, Plant and Equipment", null}, new Integer(7));
		table_1.addItem(new Object[] {"Investment Securities", null}, new Integer(8));
		table_1.addItem(new Object[] {"Investments in Associates", null}, new Integer(9));
		table_1.addItem(new Object[] {"Intangible Assets", null}, new Integer(10));
		table_1.addItem(new Object[] {"Goodwill", null}, new Integer(11));
		table_1.addItem(new Object[] {"Other Non-Current Assets", null}, new Integer(12));*/
	}
	
	public void addLiabilitiesEquityRow(List newRecord) {	
		/*
		 * LIABILITIES and SHAREHOLDERS' EQUITY
		 * Current Liabilities (Creditors: amounts falling due within one year)
		 * Accounts Payable
		 * Current Income Tax Payable
		 * Current portion of Loans Payable
		 * Short-term Provisions
		 * Other Current Liabilities, e.g. Unearned Revenue, Deposits
		 * 
		 */
		table_2.addItem(new Object[] {"Current Liabilities", newRecord.get(2)}, new Integer(1));
		/*
		table_2.addItem(new Object[] {"Accounts Payable", null}, new Integer(2));
		table_2.addItem(new Object[] {"Current Income Tax Payable", null}, new Integer(3));
		table_2.addItem(new Object[] {"Current portion of Loans Payable", null}, new Integer(4));
		table_2.addItem(new Object[] {"Short-term Provisions", null}, new Integer(5));
		table_2.addItem(new Object[] {"Other Current Liabilities, e.g. Unearned Revenue, Deposits", null}, new Integer(6));
		
		/*
		 * Non-Current Liabilities (Creditors: amounts falling due after more than one year)
		 * Loans Payable
		 * Issued Debt Securities, e.g. Notes/Bonds Payable
		 * Deferred Tax Liabilities
		 * Provisions, e.g. Pension Obligations
		 * Other Non-Current Liabilities, e.g. Lease Obligations
		 */
		/*
		table_2.addItem(new Object[] {"Loans Payable", null}, new Integer(7));
		table_2.addItem(new Object[] {"Issued Debt Securities", null}, new Integer(8));
		table_2.addItem(new Object[] {"Deferred Tax Liabilities", null}, new Integer(9));
		table_2.addItem(new Object[] {"Provisions", null}, new Integer(10));
		table_2.addItem(new Object[] {"Other Non-Current Liabilities", null}, new Integer(11));
		
		/*
		 * SHAREHOLDERS' EQUITY
		 * Paid-in Capital
		 *   Share Capital (Ordinary Shares, Preference Shares)
		 *   Share Premium
		 * Retained Earnings
		 * Revaluation Reserve
		 * Accumulated Other Comprehensive Income
		 */
		table_2.addItem(new Object[] {"Share Capital", newRecord.get(1)}, new Integer(12));
		/*
		table_2.addItem(new Object[] {"Retained Earnings", null}, new Integer(13));
		table_2.addItem(new Object[] {"Revaluation Reserve", null}, new Integer(14));
		table_2.addItem(new Object[] {"Accumulated Other Comprehensive Income", null}, new Integer(15));
		*/
	}
}