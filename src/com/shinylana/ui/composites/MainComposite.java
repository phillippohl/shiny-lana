/**
 * 
 */
package com.shinylana.ui.composites;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

/**
 * @author phillippohl
 * @version 0.1
 */
public class MainComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel_1;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Tree tree_1;
	private final Object[][] treeStructure = new Object[][] {
			new Object[]{"General", "User", "Logout"},
			new Object[]{"Finance", "Balance", "Investments"}};
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MainComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		for (int i = 0; i < treeStructure.length; i++) {
		    String item = (String) (treeStructure[i][0]);
		    tree_1.addItem(item);
		    
		    if (treeStructure[i].length == 1) {
		        // The item has no children so make it a leaf.
		        tree_1.setChildrenAllowed(item, false);
		    } else {
		        // Add children under the items.
		        for (int j = 1; j < treeStructure[i].length; j++) {
		            String subItem = (String) treeStructure[i][j];
		            
		            // Add the item as a regular item.
		            tree_1.addItem(subItem);
		            
		            // Set it to be a child.
		            tree_1.setParent(subItem, item);
		            
		            // Make the children look like leaves.
		            tree_1.setChildrenAllowed(subItem, false);
		        }

		        // Expand the subtree.
		        tree_1.expandItemsRecursively(item);
		    }
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalSplitPanel_1
		horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
		mainLayout
				.addComponent(horizontalSplitPanel_1, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(false);
		horizontalSplitPanel_1.setWidth("100.0%");
		horizontalSplitPanel_1.setHeight("100.0%");
		
		// tree_1
		tree_1 = new Tree();
		tree_1.setImmediate(false);
		tree_1.setWidth("100.0%");
		tree_1.setHeight("100.0%");
		horizontalSplitPanel_1.addComponent(tree_1);
		
		// panel_1
		panel_1 = buildPanel_1();
		horizontalSplitPanel_1.addComponent(panel_1);
		
		return horizontalSplitPanel_1;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("100.0%");
		panel_1.setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		panel_1.setContent(verticalLayout_1);
		
		return panel_1;
	}
}